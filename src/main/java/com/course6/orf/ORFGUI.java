/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.course6.orf;

import com.course6.orf.python.ORFFinderPython;
import com.course6.orf.highlight.ORFLocation;
import com.course6.orf.panel.ORFViewPanel;
import com.course6.orf.highlight.HighlightLogics;
import com.course6.orf.highlight.PanelHighlighter;
import com.course6.orf.file.ErrorFile;
import com.course6.orf.file.ReadingFileAndFrames;
import com.course6.orf.blast.BLASTResult;
import com.course6.orf.blast.BLASTData;
import com.course6.orf.panel.ALLORFOnGenomePanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JFileChooser;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.biojava.nbio.core.sequence.ProteinSequence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

class FastaFilter extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with a certain extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".fasta") || file.getAbsolutePath().endsWith(".fa") || file.getAbsolutePath().endsWith(".fas");
    }

    @Override
    public String getDescription() {
        return "Fasta files (.fasta, .fa, .fas)";
    }
}

/**
 *
 * @author thijs
 */
public class ORFGUI extends javax.swing.JFrame {

    /**
     * Creates new form ORFGUI
     */
    public ORFGUI() {
        initComponents();
        ErrorFile.checkIfFileExists();
        setSelectedItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        ShowDNASequence = new javax.swing.JFrame();
        jScrollPane6 = new javax.swing.JScrollPane();
        showDNASeqTextArea = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        saveDNAAsFastaMenu = new javax.swing.JMenu();
        showAsFastaMenu = new javax.swing.JMenuItem();
        ShowBLASTResultsFrame = new javax.swing.JFrame();
        jScrollPane7 = new javax.swing.JScrollPane();
        blastResultsScreen = new javax.swing.JTextArea();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        ShowAllORFFrame = new javax.swing.JFrame();
        jScrollPane8 = new javax.swing.JScrollPane();
        AllORFsTextArea = new javax.swing.JTextArea();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        showAsFastaAllORF = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        seqTextPane = new javax.swing.JEditorPane();
        readingFramesComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        totalORFsLabel = new javax.swing.JLabel();
        fastaHeaderCombobox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        fittingPanel = new javax.swing.JPanel();
        drawPanel = new javax.swing.JPanel();
        fittingPanel2 = new javax.swing.JPanel();
        allORFsPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        exucuteBLAST = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        blastMatrixCombo = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        blastDatabaseProgram = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        blastProgramCombo = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        eValueCutoffTextfield = new javax.swing.JTextField();
        maxAlignmentsTextfield = new javax.swing.JTextField();
        sizeHitsListTextfield = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        saveSettingsButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        BLASTSeqResJList = new javax.swing.JList<>();
        stopBLASTButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        uselessDBButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectedORFField = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ORFInfoField = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openJMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        showDNAofORFMenu = new javax.swing.JMenuItem();
        allORFsMenu = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new FastaFilter());

        ShowDNASequence.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ShowDNASequence.setSize(new java.awt.Dimension(500, 450));

        jScrollPane6.setSize(ShowDNASequence.getWidth(), jScrollPane6.getHeight());

        showDNASeqTextArea.setColumns(20);
        showDNASeqTextArea.setRows(5);
        showDNASeqTextArea.setLineWrap(true);
        jScrollPane6.setViewportView(showDNASeqTextArea);

        saveDNAAsFastaMenu.setText("File");

        showAsFastaMenu.setText("Show as Fasta...");
        showAsFastaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAsFastaMenuActionPerformed(evt);
            }
        });
        saveDNAAsFastaMenu.add(showAsFastaMenu);

        jMenuBar2.add(saveDNAAsFastaMenu);

        ShowDNASequence.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout ShowDNASequenceLayout = new javax.swing.GroupLayout(ShowDNASequence.getContentPane());
        ShowDNASequence.getContentPane().setLayout(ShowDNASequenceLayout);
        ShowDNASequenceLayout.setHorizontalGroup(
            ShowDNASequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowDNASequenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );
        ShowDNASequenceLayout.setVerticalGroup(
            ShowDNASequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowDNASequenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );

        ShowBLASTResultsFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ShowBLASTResultsFrame.setSize(new java.awt.Dimension(524, 600));

        jScrollPane7.setSize(ShowBLASTResultsFrame.getWidth(), jScrollPane7.getHeight());

        blastResultsScreen.setColumns(20);
        blastResultsScreen.setRows(5);
        jScrollPane7.setViewportView(blastResultsScreen);

        jMenu3.setText("File");
        jMenuBar3.add(jMenu3);

        ShowBLASTResultsFrame.setJMenuBar(jMenuBar3);

        javax.swing.GroupLayout ShowBLASTResultsFrameLayout = new javax.swing.GroupLayout(ShowBLASTResultsFrame.getContentPane());
        ShowBLASTResultsFrame.getContentPane().setLayout(ShowBLASTResultsFrameLayout);
        ShowBLASTResultsFrameLayout.setHorizontalGroup(
            ShowBLASTResultsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowBLASTResultsFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ShowBLASTResultsFrameLayout.setVerticalGroup(
            ShowBLASTResultsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowBLASTResultsFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ShowAllORFFrame.setSize(new java.awt.Dimension(500, 450));

        jScrollPane8.setSize(ShowAllORFFrame.getWidth(), jScrollPane8.getHeight());

        AllORFsTextArea.setColumns(20);
        AllORFsTextArea.setRows(5);
        AllORFsTextArea.setLineWrap(true);
        jScrollPane8.setViewportView(AllORFsTextArea);

        jMenu4.setText("File");

        showAsFastaAllORF.setText("Show as Fasta...");
        showAsFastaAllORF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAsFastaAllORFActionPerformed(evt);
            }
        });
        jMenu4.add(showAsFastaAllORF);

        jMenuBar4.add(jMenu4);

        ShowAllORFFrame.setJMenuBar(jMenuBar4);

        javax.swing.GroupLayout ShowAllORFFrameLayout = new javax.swing.GroupLayout(ShowAllORFFrame.getContentPane());
        ShowAllORFFrame.getContentPane().setLayout(ShowAllORFFrameLayout);
        ShowAllORFFrameLayout.setHorizontalGroup(
            ShowAllORFFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAllORFFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );
        ShowAllORFFrameLayout.setVerticalGroup(
            ShowAllORFFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAllORFFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ORF Reader");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ORF Reader");

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Reading Frame:");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setHorizontalScrollBar(null);

        seqTextPane.setEditable(false);
        seqTextPane.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        seqTextPane.setToolTipText("");
        seqTextPane.setMargin(new java.awt.Insets(0, 0, 0, 12));
        seqTextPane.setMinimumSize(new java.awt.Dimension(100, 22));
        seqTextPane.setName(""); // NOI18N
        seqTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seqTextPaneMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(seqTextPane);

        readingFramesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "+1", "+2", "+3", "-1", "-2", "-3" }));
        readingFramesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readingFramesComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Total ORFs found:");

        totalORFsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalORFsLabel.setText("No data");

        fastaHeaderCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastaHeaderComboboxActionPerformed(evt);
            }
        });

        jLabel9.setText("Fasta Header:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(readingFramesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fastaHeaderCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalORFsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(readingFramesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fastaHeaderCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(totalORFsLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("All ORF's in file", jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("Position on genome:");

        drawPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fittingPanelLayout = new javax.swing.GroupLayout(fittingPanel);
        fittingPanel.setLayout(fittingPanelLayout);
        fittingPanelLayout.setHorizontalGroup(
            fittingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fittingPanelLayout.setVerticalGroup(
            fittingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        allORFsPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout allORFsPanelLayout = new javax.swing.GroupLayout(allORFsPanel);
        allORFsPanel.setLayout(allORFsPanelLayout);
        allORFsPanelLayout.setHorizontalGroup(
            allORFsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        allORFsPanelLayout.setVerticalGroup(
            allORFsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fittingPanel2Layout = new javax.swing.GroupLayout(fittingPanel2);
        fittingPanel2.setLayout(fittingPanel2Layout);
        fittingPanel2Layout.setHorizontalGroup(
            fittingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(allORFsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fittingPanel2Layout.setVerticalGroup(
            fittingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fittingPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(allORFsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel8.setText("All ORF's in genome:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fittingPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fittingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addGap(0, 739, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fittingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(10, 10, 10)
                .addComponent(fittingPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(202, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Selected ORF in genome", jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        exucuteBLAST.setText("BLAST");
        exucuteBLAST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exucuteBLASTActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        blastMatrixCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PAM30", "PAM70", "PAM250", "BLOSUM90", "BLOSUM80", "BLOSUM62", "BLOSUM50", "BLOSUM45" }));
        blastMatrixCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blastMatrixComboActionPerformed(evt);
            }
        });

        jLabel15.setText("BLAST Program:");

        jLabel17.setText("Matrix:");

        jLabel14.setText("Max size hits list:");

        jLabel16.setText("BLAST Database:");

        blastDatabaseProgram.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "env_nr", "nr", "pataa", "pdbaa", "refseq_protein", "swissprot", "env_nt", "est", "est_human", "est_mouse", "est_others", "gss", "htgs", "nt", "patnt", "pdbnt", "sts", "vector", "wgs", "other_genomic", "refseq_genomic", "refseq_rna", "refseqgene" }));
        blastDatabaseProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blastDatabaseProgramActionPerformed(evt);
            }
        });

        jLabel18.setText("E-value cutoff:");

        blastProgramCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "blastn", "blastp", "blastx", "tblastn", "tblastx" }));
        blastProgramCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blastProgramComboActionPerformed(evt);
            }
        });

        jLabel13.setText("Max alignments:");

        eValueCutoffTextfield.setText("0.01");
        eValueCutoffTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                eValueCutoffTextfieldKeyPressed(evt);
            }
        });

        maxAlignmentsTextfield.setText("50");
        maxAlignmentsTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                maxAlignmentsTextfieldKeyPressed(evt);
            }
        });

        sizeHitsListTextfield.setText("50");
        sizeHitsListTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sizeHitsListTextfieldKeyPressed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel19.setText("BLAST Settings:");

        saveSettingsButton.setText("Save");
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Database Settings:");

        BLASTSeqResJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        BLASTSeqResJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                BLASTSeqResJListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(BLASTSeqResJList);

        stopBLASTButton.setText("Stop");
        stopBLASTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBLASTButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Hier zouden database settings staan als de connectie ooit werkte");

        uselessDBButton.setText("er komt een popup als er ooit een connectie wordt gemaakt");
        uselessDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uselessDBButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel16)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel13))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sizeHitsListTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(maxAlignmentsTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(eValueCutoffTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(blastMatrixCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(blastDatabaseProgram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(blastProgramCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel19))
                                .addGap(181, 181, 181))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(saveSettingsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stopBLASTButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exucuteBLAST)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(uselessDBButton)
                                    .addComponent(jLabel11)))))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {eValueCutoffTextfield, maxAlignmentsTextfield, sizeHitsListTextfield});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {blastDatabaseProgram, blastMatrixCombo, blastProgramCombo});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(blastProgramCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(blastDatabaseProgram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(blastMatrixCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(eValueCutoffTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(maxAlignmentsTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sizeHitsListTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(exucuteBLAST)
                                    .addComponent(saveSettingsButton)
                                    .addComponent(stopBLASTButton)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(53, 53, 53)
                                .addComponent(jLabel11)
                                .addGap(22, 22, 22)
                                .addComponent(uselessDBButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );

        jTabbedPane1.addTab("BLAST", jPanel2);

        jLabel3.setText("Selected ORF:");

        selectedORFField.setEditable(false);
        selectedORFField.setColumns(20);
        selectedORFField.setRows(5);
        selectedORFField.setLineWrap(true);
        jScrollPane1.setViewportView(selectedORFField);

        jLabel4.setText("ORF Data");

        ORFInfoField.setEditable(false);
        ORFInfoField.setColumns(20);
        ORFInfoField.setRows(5);
        jScrollPane4.setViewportView(ORFInfoField);

        jMenu1.setText("File");

        openJMenu.setText("Open");
        openJMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openJMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        showDNAofORFMenu.setText("Show DNA sequence of selected ORF");
        showDNAofORFMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDNAofORFMenuActionPerformed(evt);
            }
        });
        jMenu2.add(showDNAofORFMenu);

        allORFsMenu.setText("Show DNA sequence of all ORF's");
        allORFsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allORFsMenuActionPerformed(evt);
            }
        });
        jMenu2.add(allORFsMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setSelectedItems() {
        blastProgramCombo.setSelectedItem(BLASTProgram);
        blastDatabaseProgram.setSelectedItem(BLASTDatabase);
        blastMatrixCombo.setSelectedItem(BLASTMatrix);
        eValueCutoffTextfield.setText(String.valueOf(eValueCutOff));
        maxAlignmentsTextfield.setText(String.valueOf(maxAlignments));
        sizeHitsListTextfield.setText(String.valueOf(maxListSize));
    }

    private void openJMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openJMenuActionPerformed
        String filePath;
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            try {
//                filePathTextField.setText(file.getAbsolutePath());
                readFile(true);
            } catch (Exception ex) {
                System.out.println("problem accessing file " + file.getAbsolutePath());
                //ErrorFile.savingErrors(ex.getStackTrace());
            }

        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openJMenuActionPerformed

    private void readingFramesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readingFramesComboBoxActionPerformed
        readingFrames(evt);
    }//GEN-LAST:event_readingFramesComboBoxActionPerformed

    private void seqTextPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seqTextPaneMouseClicked
        highlightedItemAndStats(evt);
    }//GEN-LAST:event_seqTextPaneMouseClicked

    private void exucuteBLASTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exucuteBLASTActionPerformed
        BLAST();
    }//GEN-LAST:event_exucuteBLASTActionPerformed

    private void showDNAofORFMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDNAofORFMenuActionPerformed
        showDNASeqOfORF();
    }//GEN-LAST:event_showDNAofORFMenuActionPerformed

    private void showAsFastaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAsFastaMenuActionPerformed
        showDNASeqAsFasta();
    }//GEN-LAST:event_showAsFastaMenuActionPerformed

    // Declaration of BLAST variables
    private void blastProgramComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blastProgramComboActionPerformed
        setBLASTVars(evt);
    }//GEN-LAST:event_blastProgramComboActionPerformed

    private void blastDatabaseProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blastDatabaseProgramActionPerformed
        setBLASTVars(evt);
    }//GEN-LAST:event_blastDatabaseProgramActionPerformed

    private void blastMatrixComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blastMatrixComboActionPerformed
        setBLASTVars(evt);
    }//GEN-LAST:event_blastMatrixComboActionPerformed

    private void eValueCutoffTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eValueCutoffTextfieldKeyPressed
        setOtherVars(evt);
    }//GEN-LAST:event_eValueCutoffTextfieldKeyPressed

    private void maxAlignmentsTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxAlignmentsTextfieldKeyPressed
        setOtherVars(evt);
    }//GEN-LAST:event_maxAlignmentsTextfieldKeyPressed

    private void sizeHitsListTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sizeHitsListTextfieldKeyPressed
        setOtherVars(evt);
    }//GEN-LAST:event_sizeHitsListTextfieldKeyPressed
    // End of BLAST variables

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsButtonActionPerformed
        saveSettings();
    }//GEN-LAST:event_saveSettingsButtonActionPerformed

    private void BLASTSeqResJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_BLASTSeqResJListValueChanged
        if (evt.getValueIsAdjusting()) {
            BLASTResultsList(evt);
        }
    }//GEN-LAST:event_BLASTSeqResJListValueChanged

    private void stopBLASTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBLASTButtonActionPerformed
        stopBLAST();
    }//GEN-LAST:event_stopBLASTButtonActionPerformed

    private void allORFsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allORFsMenuActionPerformed
        showAllORFs();
    }//GEN-LAST:event_allORFsMenuActionPerformed

    private void showAsFastaAllORFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAsFastaAllORFActionPerformed
        showAllORFFasta();
    }//GEN-LAST:event_showAsFastaAllORFActionPerformed

    private void fastaHeaderComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastaHeaderComboboxActionPerformed
        getHeader(evt);
    }//GEN-LAST:event_fastaHeaderComboboxActionPerformed

    private void uselessDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uselessDBButtonActionPerformed
        databaseConnection();
    }//GEN-LAST:event_uselessDBButtonActionPerformed

    private void saveSettings() {

        // Comboboxes dont need this, this is only extra for if you dont press "enter" on the textfields
        
        try {
            eValueCutOff = Float.valueOf(eValueCutoffTextfield.getText());
        } catch (NumberFormatException exc) {
            eValueCutOff = 0.01f;
            JOptionPane.showMessageDialog(this, "The given E-Value is invalid");
        }

        try {
            maxAlignments = Integer.valueOf(maxAlignmentsTextfield.getText());
        } catch (NumberFormatException exc) {
            maxAlignments = 500;
            JOptionPane.showMessageDialog(this, "The given number for maximum alignments is invalid");
        }

        try {
            maxListSize = Integer.valueOf(sizeHitsListTextfield.getText());
        } catch (NumberFormatException exc) {
            maxListSize = 50;
            JOptionPane.showMessageDialog(this, "The given number for maximum list size is invalid");
        }

    }

    private void databaseConnection() {
        /*
        Na ongeveer 5 uur proberen om de connectie te maken heb ik er geen zin meer in
        */
        String url = "jdbc:mysql://85.214.90.171:1521/owe7_pg8"; // Directe ip-adress van cytosine.nl

        new Thread() {
            @Override
            public void run() {
                uselessDBButton.setEnabled(false);
                Statement stmt = null;
                ResultSet rs = null;
                try {
                    Class.forName("com.mysql.jdbc.Driver").newInstance();
                    Connection connection = DriverManager.getConnection(url, "owe7_pg8", "blaat1234");
                    JOptionPane.showMessageDialog(ORFGUI.getWindows()[0], "Connectie"); // Kwam hier na 30 min nog steeds niet

                    stmt = connection.createStatement();
                    rs = stmt.executeQuery("SELECT * FROM Bestand");

                    System.out.println(rs);

                } catch (SQLException e) {
                    throw new IllegalStateException("Cannot connect the database!", e);
                } catch (Exception exc) {
                    exc.printStackTrace();
                } finally {
                    if (rs != null) {
                        try {
                            rs.close();
                        } catch (SQLException sqlEx) {
                        } // ignore

                        rs = null;
                    }

                    if (stmt != null) {
                        try {
                            stmt.close();
                        } catch (SQLException sqlEx) {
                        } // ignore

                        stmt = null;
                    }
                }
                uselessDBButton.setEnabled(true);
            }
        }.start();
    }

    // The combobox variables get assigned here.
    private void setBLASTVars(java.awt.event.ActionEvent evt) {
        JComboBox<String> options = (JComboBox<String>) evt.getSource();
        if (options == blastProgramCombo) {
            BLASTProgram = (String) options.getSelectedItem();
        } else if (options == blastDatabaseProgram) {
            BLASTDatabase = (String) options.getSelectedItem();
        } else if (options == blastMatrixCombo) {
            BLASTMatrix = (String) options.getSelectedItem();
        }
    }

    // The actionperformed of the blast textfield options are set on "enter" and they get assigned here
    private void setOtherVars(java.awt.event.KeyEvent evt) {
        if (evt.getExtendedKeyCode() == 10) {
            JTextField component = (JTextField) evt.getSource();
            if (component == eValueCutoffTextfield) {
                try {
                    eValueCutOff = Float.valueOf(eValueCutoffTextfield.getText());
                } catch (NumberFormatException exc) {
                    eValueCutOff = 0.01f;
                    JOptionPane.showMessageDialog(this, "The given E-Value is invalid");
                }
            } else if (component == maxAlignmentsTextfield) {
                try {
                    maxAlignments = Integer.valueOf(maxAlignmentsTextfield.getText());
                } catch (NumberFormatException exc) {
                    maxAlignments = 500;
                    JOptionPane.showMessageDialog(this, "The given number for maximum alignments is invalid");
                }
            } else if (component == sizeHitsListTextfield) {
                try {
                    maxListSize = Integer.valueOf(sizeHitsListTextfield.getText());
                } catch (NumberFormatException exc) {
                    maxListSize = 50;
                    JOptionPane.showMessageDialog(this, "The given number for maximum list size is invalid");
                }
            }
        }
    }

    // Gets the selected header from the combobox on the first tab, only really useful if you use multiple-fasta files
    private void getHeader(java.awt.event.ActionEvent evt) {
        selectedHeader = ReadingFileAndFrames.comboboxSelectedItem(evt);
        fastaHeaderCombobox.setToolTipText(selectedHeader);
        readFile(false);
    }

    // Gets the DNA string form the file
    private void readFile(boolean firstRun) {
        // Reads the file you selected in the fileChooser
        String fileString = file.getAbsolutePath();
        if (firstRun) {
            // Only the fileChooser can give a "true" so the combobox with headers gets refreshed.
            ReadingFileAndFrames.setFastaHeaders(fileString, fastaHeaderCombobox);
        }
        // Continues with the sequence of the selected header, at first run it's the first one in the combobox/file
        sequenceString = ReadingFileAndFrames.readHeader(selectedHeader, fileString);
        highlightedFrame();
    }

    private void readingFrames(java.awt.event.ActionEvent evt) {
        readingFrame = ReadingFileAndFrames.comboboxSelectedItem(evt);
        if (!sequenceString.isEmpty()) {
            highlightedFrame();
        }
    }
    /*
    This method covers the translating from a DNA sequence to Protein, highlights all the ORF's in the sequence and saves all the found ORF's in a List
    */
    private void highlightedFrame() {
        ProteinSequence protSeq = ReadingFileAndFrames.getReadingFrameSequence(readingFrame, sequenceString);
        proteinLength = protSeq.getLength();
        seqTextPane.setText(protSeq.toString());
        AllOrfLocations = PanelHighlighter.patternMatcher(protSeq, totalORFsLabel, seqTextPane);
    }

    // Gets the selected item on a mouse click and gets the start and end position of the highlight
    private void highlightedItemAndStats(java.awt.event.MouseEvent evt) {
        // Position of the mouse
        Point mousePoint = evt.getPoint();
        
        // This is only ever useful if there is a sequence in the first place
        if (!sequenceString.isEmpty()) {
            String highlightededUnderMouse = HighlightLogics.getHighlightededUnderMouse(seqTextPane, mousePoint.x, mousePoint.y);
            selectedORFField.setText(highlightededUnderMouse);

            ORFLocation location = HighlightLogics.getHighlightededItemUnderMouseInfo(seqTextPane, mousePoint.x, mousePoint.y);
            ORFInfoField.setText("Total length of genome: " + proteinLength + System.lineSeparator() + "Frame: " + readingFrame + System.lineSeparator() + "Length of ORF: " + Math.abs(location.getEnd() - location.getStart()) + System.lineSeparator() + "Start position: " + location.getStart() + System.lineSeparator() + "Stop position: " + location.getEnd());
            
            // For visualisation on the second tab
            locationOnGenome(location);
            // DNA sequence of selected ORF
            selectedDNASequence = sequenceString.substring(location.getStart() * 3, location.getEnd() * 3);
        }

    }

    private void locationOnGenome(ORFLocation location) {
        /* 
        Removes the old panel first and replaces it with a new panel on which the ORF in visualised on the genome
        Uses code that is copied from the code that the GUI builder from Netbeans generates
         */
        Component oldPanelTop = fittingPanel.getComponent(0); // Only component in the fitting panel is the other panel
        fittingPanel.remove(oldPanelTop);

        JPanel orfVisual = new ORFViewPanel(location, proteinLength, oldPanelTop.getSize());

        orfVisual.setBackground(Color.white);

        Component oldPanelBottom = fittingPanel2.getComponent(0);// Only component in the fitting panel is the other panel
        fittingPanel2.remove(oldPanelBottom);

        JPanel AllOrfVisual = new ALLORFOnGenomePanel(AllOrfLocations, location, proteinLength, oldPanelBottom.getSize());

        AllOrfVisual.setBackground(Color.white);

        //<editor-fold defaultstate="collapsed" desc="Copied from generated code for layout">
        // Top panel
        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(orfVisual);
        orfVisual.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
                drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
                drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 127, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fittingPanelLayout = new javax.swing.GroupLayout(fittingPanel);
        fittingPanel.setLayout(fittingPanelLayout);
        fittingPanelLayout.setHorizontalGroup(
                fittingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(orfVisual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fittingPanelLayout.setVerticalGroup(
                fittingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(orfVisual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        // Bottom panel
        javax.swing.GroupLayout allORFsPanelLayout = new javax.swing.GroupLayout(AllOrfVisual);
        AllOrfVisual.setLayout(allORFsPanelLayout);
        allORFsPanelLayout.setHorizontalGroup(
                allORFsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        allORFsPanelLayout.setVerticalGroup(
                allORFsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fittingPanel2Layout = new javax.swing.GroupLayout(fittingPanel2);
        fittingPanel2.setLayout(fittingPanel2Layout);
        fittingPanel2Layout.setHorizontalGroup(
                fittingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(AllOrfVisual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fittingPanel2Layout.setVerticalGroup(
                fittingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fittingPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(AllOrfVisual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

//</editor-fold>

    }
    /*
    This method creates the python script needed for performing the BLAST, runs it and processes the BLAST data
    */
    private void BLAST() {
        if (!"".equals(selectedORFField.getText())) {
            try {

                System.out.println("Currently performing a BLAST");
                ORFFinderPython.createBLASTScript();

                blastThread = new Thread() { // Stops it from locking the application
                    @Override
                    public void run() {
                        try {
                            exucuteBLAST.setEnabled(false);
                            exucuteBLAST.setToolTipText("Currently performing a BLAST");
                            stopBLASTButton.setEnabled(true);
                            
                            String sequence;
                            
                            // Checks which sequence is needed to perform the selected BLAST
                            if ("blastn".equals(BLASTProgram) | "blastx".equals(BLASTProgram) | "tblastx".equals(BLASTProgram)) {
                                sequence = selectedDNASequence;
                            } else {
                                sequence = selectedORFField.getText();
                            }
                            
                            BLASTResults = BLASTData.getBLASTResult(BLASTProgram, BLASTDatabase, sequence, String.valueOf(eValueCutOff), String.valueOf(maxListSize), BLASTMatrix, String.valueOf(maxAlignments));

                            BLASTMap = BLASTData.addToBLASTMap(sequence, BLASTResults, BLASTMap);
                            
                            // Puts the keys from the HashMap containing all the BLAST data in a JList for the user to select a BLASt result.
                            String[] tempArray = BLASTMap.keySet().toArray(new String[BLASTMap.size()]);
                            BLASTSeqResJList.setListData(tempArray);
                            
                            JOptionPane.showMessageDialog(ORFGUI.getWindows()[0], "Done with BLAST");
                            exucuteBLAST.setEnabled(true);
                            exucuteBLAST.setToolTipText("Perform a BLAST");
                            stopBLASTButton.setEnabled(false);
                        } catch (IOException e) {
                            exucuteBLAST.setEnabled(true);
                            exucuteBLAST.setToolTipText("Perform a BLAST");
                            e.printStackTrace();
                            ErrorFile.savingErrors(e.getStackTrace());
                        } catch (Exception e) {
                            exucuteBLAST.setEnabled(true);
                            exucuteBLAST.setToolTipText("Perform a BLAST");
                            e.printStackTrace();
                            ErrorFile.savingErrors(e.getStackTrace());
                        }
                    }
                };
                blastThread.start();

            } catch (Exception ex) {
                ErrorFile.savingErrors(ex.getStackTrace());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an ORF first before attempting to BLAST");
        }
    }
    /*
    Shows the BLAST results of the selected ORF from the JList,
    this gets displayed in a different frame
    */
    private void BLASTResultsList(javax.swing.event.ListSelectionEvent evt) {
        String selectedItem = BLASTSeqResJList.getSelectedValue();
        List<BLASTResult> BLASTResultsList = (List<BLASTResult>) BLASTMap.get(selectedItem);
        BLASTSeqResJList.setToolTipText(selectedItem);
        
        blastResultsScreen.setText("");
        if (BLASTResultsList.isEmpty()) {
            blastResultsScreen.setText("No results available");
        }
        BLASTResultsList.forEach((result) -> {
            blastResultsScreen.append(result.toString());
            blastResultsScreen.append(System.lineSeparator());
        });
        ShowBLASTResultsFrame.setVisible(true);

    }

    // Stop the current BLAST from running
    private void stopBLAST() {
        stopBLASTButton.setEnabled(false);
        exucuteBLAST.setEnabled(true);
        try {
            blastThread.interrupt();
        } catch (Exception exc) {
            exc.printStackTrace();
            ErrorFile.savingErrors(exc.getStackTrace());
        }
    }

    // Opens a window which shows the DNA sequence of the currently selected ORF
    private void showDNASeqOfORF() {
        if (selectedDNASequence == null || selectedDNASequence.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a ORF first");
        } else {
            showDNASeqTextArea.setText(selectedDNASequence);
            ShowDNASequence.setVisible(true);
        }
    }

    // Shows ^ method in a fasta format
    private void showDNASeqAsFasta() {
        String fastaH = ">Unknown DNA sequence of length " + selectedDNASequence.length() + " reading frame: " + readingFrame;
        showDNASeqTextArea.setText(fastaH + System.lineSeparator());
        showDNASeqTextArea.append(selectedDNASequence);
    }

    // Opens a window which shows all the DNA sequences of all the ORF's in the currently selected frame
    private void showAllORFs() {
        if (AllOrfLocations == null || AllOrfLocations.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please open a file first");
        } else {
            for (ORFLocation location : AllOrfLocations) {
                String seq = sequenceString.substring(location.getStart()*3, location.getEnd()*3);
                System.out.println(seq);
                AllORFsTextArea.append(seq + System.lineSeparator());
            }
            ShowAllORFFrame.setVisible(true);
        }
    }

    // Shows the ORF's of ^ method in fasta format
    private void showAllORFFasta() {
        AllORFsTextArea.setText("");

        int loc = 0;
        for (ORFLocation location : AllOrfLocations) {
            String fastaH = ">Unknown ORF " + loc + " of length " + location.getLength() + " reading frame: " + readingFrame;
            String seq = sequenceString.substring(location.getStart()*3, location.getEnd()*3);
            AllORFsTextArea.append(fastaH + System.lineSeparator() + seq + System.lineSeparator());
            loc++;
        }
    }

    /* ****** End of code ****** */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ORFGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ORFGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ORFGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ORFGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ORFGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AllORFsTextArea;
    private javax.swing.JList<String> BLASTSeqResJList;
    private javax.swing.JTextArea ORFInfoField;
    private javax.swing.JFrame ShowAllORFFrame;
    private javax.swing.JFrame ShowBLASTResultsFrame;
    private javax.swing.JFrame ShowDNASequence;
    private javax.swing.JMenuItem allORFsMenu;
    private javax.swing.JPanel allORFsPanel;
    private javax.swing.JComboBox<String> blastDatabaseProgram;
    private javax.swing.JComboBox<String> blastMatrixCombo;
    private javax.swing.JComboBox<String> blastProgramCombo;
    private javax.swing.JTextArea blastResultsScreen;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JTextField eValueCutoffTextfield;
    private javax.swing.JButton exucuteBLAST;
    private javax.swing.JComboBox<String> fastaHeaderCombobox;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel fittingPanel;
    private javax.swing.JPanel fittingPanel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField maxAlignmentsTextfield;
    private javax.swing.JMenuItem openJMenu;
    private javax.swing.JComboBox<String> readingFramesComboBox;
    private javax.swing.JMenu saveDNAAsFastaMenu;
    private javax.swing.JButton saveSettingsButton;
    private javax.swing.JTextArea selectedORFField;
    private javax.swing.JEditorPane seqTextPane;
    private javax.swing.JMenuItem showAsFastaAllORF;
    private javax.swing.JMenuItem showAsFastaMenu;
    private javax.swing.JTextArea showDNASeqTextArea;
    private javax.swing.JMenuItem showDNAofORFMenu;
    private javax.swing.JTextField sizeHitsListTextfield;
    private javax.swing.JButton stopBLASTButton;
    private javax.swing.JLabel totalORFsLabel;
    private javax.swing.JButton uselessDBButton;
    // End of variables declaration//GEN-END:variables
    // Sequence variables:
    private String readingFrame = "+1";
    private String sequenceString = "";
    private String selectedDNASequence = "";
    private String selectedHeader = "";
    private File file;
    private int proteinLength;
    private List<ORFLocation> AllOrfLocations = new ArrayList<>();

    // BLAST variables:
    private int maxAlignments = 500;
    private int maxListSize = 50;
    private float eValueCutOff = 0.01f;
    private String BLASTProgram = "blastp";
    private String BLASTDatabase = "nr";
    private String BLASTMatrix = "BLOSUM62";
    private List<BLASTResult> BLASTResults = new ArrayList<>();
    private Map<String, List<BLASTResult>> BLASTMap = new HashMap<>();

    // Other stuff
    private Thread blastThread;
}
